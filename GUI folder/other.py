# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'other.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Polygon, Rectangle, FancyBboxPatch
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5 import QtCore, QtWidgets

class AttitudeIndicatorCanvas(FigureCanvas):
    def __init__(self, parent=None):
        fig, self.ax = plt.subplots(figsize=(6, 6))
        super().__init__(fig)
        self.setParent(parent)

        self.ax.set_xlim(-1.5, 1.5)
        self.ax.set_ylim(-1.5, 1.5)

        # Draw the horizon (initially flat)
        self.horizon = Polygon([[-2, 0], [2, 0], [2, -2], [-2, -2]], color='brown')
        self.ax.add_patch(self.horizon)
        
        # Draw sky
        self.sky = Polygon([[-2, 0], [2, 0], [2, 2], [-2, 2]], color='skyblue')
        self.ax.add_patch(self.sky)

        # Draw fixed aircraft symbol
        self.ax.plot([0, 0], [0, 0.05], color='black', lw=3)  # Aircraft center
        self.ax.plot([-0.1, 0.1], [0, 0], color='black', lw=3)    # Wings

          # Create a rounded rectangle for the roll indicator background
        self.roll_background = FancyBboxPatch(
            (-1, -1.20),  # Lower left corner
            2.0, 0.05,      # Width and height
            boxstyle="round,pad=0.10",  # Use pad to create rounded corners
            color='black'
        )
        self.ax.add_patch(self.roll_background)

        # Create the roll indicator ball
        self.roll_ball = self.ax.add_patch(plt.Circle((0, -1.25), 0.1, color='white'))

        # Horizon markings (part of the horizon now)
        self.pitch_markings = self.create_pitch_markings()

        self.ax.set_xticks([])
        self.ax.set_yticks([])
        self.ax.set_aspect('equal')

        self.ax.spines['top'].set_color('none')
        self.ax.spines['bottom'].set_color('none')
        self.ax.spines['left'].set_color('none')
        self.ax.spines['right'].set_color('none')

        # Add labels for altitude, pitch, and roll on the graphical part
        self.altitude_label = self.ax.text(-1.3, 1.3, 'Altitude: 0 ft', color='white', fontsize=12, ha='left')
        self.pitch_label = self.ax.text(0, 1.3, 'Pitch: 0°', color='white', fontsize=12, ha='center')
        self.roll_label = self.ax.text(0.8, 0, ' 0°', color='white', fontsize=12, ha='right')

        self.update_horizon(0, 0, 0)  # Set initial horizon with no pitch/roll

    def create_pitch_markings(self):
        # Create pitch markings relative to the horizon
        pitch_degrees = [0, 10, -10, 20]
        markings = []

        for pitch in pitch_degrees:
            y_pos = np.sin(np.deg2rad(pitch))  # Calculate y position for pitch marks
            line, = self.ax.plot([-0.2, 0.2], [y_pos, y_pos], color='white', lw=2)

            # If pitch is negative, show negative label
            label_text = f'{pitch}' if pitch < 0 else f'{pitch}'  # Show minus sign for negative pitches
            label = self.ax.text(0.25, y_pos, label_text, color='white', fontsize=10, verticalalignment='center')
            
            markings.append((line, label))
        
        #
        markings.append((None, None))

        return markings

    def update_horizon(self, pitch, roll, altitude):
        # Adjust the horizon based on pitch and roll values
        pitch_radians = np.deg2rad(pitch)
        roll_radians = np.deg2rad(roll)

        # Define the horizon shape based on pitch
        horizon_y_shift = np.sin(pitch_radians)
        rotation_matrix = np.array([[np.cos(roll_radians), -np.sin(roll_radians)],
                                    [np.sin(roll_radians), np.cos(roll_radians)]])

        # Apply transformations (roll and pitch) to the horizon
        horizon_coords = np.array([[-2, horizon_y_shift], [2, horizon_y_shift], [2, -2], [-2, -2]])
        rotated_horizon_coords = (horizon_coords @ rotation_matrix.T)
        self.horizon.set_xy(rotated_horizon_coords)

        # Update the sky (mirrored coordinates)
        sky_coords = np.array([[-2, horizon_y_shift], [2, horizon_y_shift], [2, 2], [-2, 2]])
        rotated_sky_coords = (sky_coords @ rotation_matrix.T)
        self.sky.set_xy(rotated_sky_coords)

        # Update pitch markings (NOW apply roll)
        for i, (line, label) in enumerate(self.pitch_markings[:-1]):  # Exclude horizon line
            pitch_mark = [0, 10, -10, 20, -20][i]  # Corresponding pitch angles
            y_pos = np.sin(np.deg2rad(pitch_mark + pitch))  # Adjust y position based on pitch

            # Create a horizontal line for pitch mark and apply roll transformation
            pitch_line_coords = np.array([[-0.2, y_pos], [0.2, y_pos]])
            rotated_pitch_line_coords = (pitch_line_coords @ rotation_matrix.T)
            line.set_data(rotated_pitch_line_coords[:, 0], rotated_pitch_line_coords[:, 1])

            # Update label position similarly
            if label is not None:
                rotated_label_coords = np.array([0.25, y_pos]) @ rotation_matrix.T
                label.set_position(rotated_label_coords)

         # Calculate ball position based on roll
        ball_x_position = roll / 90  # Normalized position; adjust for your scale if necessary
        self.roll_ball.set_center((ball_x_position, -1.17))  # Update ball position

        # Update the altitude, pitch, and roll labels with current values
        self.altitude_label.set_text(f'Altitude: {altitude} ft')  # Set altitude statically here for demo
        self.pitch_label.set_text(f'Pitch: {pitch}°')
        self.roll_label.set_text(f'{roll}°')

        self.draw()  # Redraw the canvas with updated horizon, sky, pitch markings, and labels



class AttitudeIndicatorApp(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Virtual Attitude Indicator")
        self.canvas = AttitudeIndicatorCanvas(self)

        # Create sliders to control pitch and roll
        self.pitch_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.pitch_slider.setRange(-90, 90)
        self.pitch_slider.setValue(0)
        self.pitch_slider.setTickInterval(10)
        self.pitch_slider.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.pitch_slider.valueChanged.connect(self.update_attitude)

        self.roll_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.roll_slider.setRange(-90, 90)
        self.roll_slider.setValue(0)
        self.roll_slider.setTickInterval(10)
        self.roll_slider.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.roll_slider.valueChanged.connect(self.update_attitude)

        # Add an altitude slider (optional)
        self.altitude_slider = QtWidgets.QSlider(QtCore.Qt.Horizontal)
        self.altitude_slider.setRange(0, 50000)  # Example range in feet (adjust as necessary)
        self.altitude_slider.setValue(0)  # Default altitude (adjust as necessary)
        self.altitude_slider.setTickInterval(5000)
        self.altitude_slider.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.altitude_slider.valueChanged.connect(self.update_attitude)

        # Create labels for pitch, roll, and altitude
        self.pitch_label = QtWidgets.QLabel('Pitch: 0°')
        self.roll_label = QtWidgets.QLabel('Roll: 0°')
        self.altitude_label = QtWidgets.QLabel('Altitude: 0 ft')  # Initial altitude label

        # Layout
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.canvas)
        
        # Altitude layout
        layout.addWidget(self.altitude_label)
        layout.addWidget(self.altitude_slider)
        
        # Pitch layout
        layout.addWidget(self.pitch_label)
        layout.addWidget(self.pitch_slider)
        
        # Roll layout
        layout.addWidget(self.roll_label)
        layout.addWidget(self.roll_slider)

        self.setLayout(layout)

    def update_attitude(self):
        pitch = self.pitch_slider.value()
        roll = self.roll_slider.value()
        altitude = self.altitude_slider.value()

        print(f'Pitch: {pitch}°, Roll: {roll}°, Altitude: {altitude} ft')

        # Update labels with current values
        self.pitch_label.setText(f'Pitch: {pitch}°')
        self.roll_label.setText(f'Roll: {roll}°')
        self.altitude_label.setText(f'Altitude: {altitude} ft')

        # Update the canvas with new pitch and roll values
        self.canvas.update_horizon(pitch, roll, altitude)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1437, 890)
        MainWindow.setStyleSheet("background-color: rgb(226, 227, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(-10, 0, 1431, 151))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.TITLE = QtWidgets.QLabel(self.frame)
        self.TITLE.setGeometry(QtCore.QRect(20, 0, 1411, 151))
        self.TITLE.setStyleSheet("font: 8pt \"MS Shell Dlg 2\";\n"
"font: 75 8pt \"Trebuchet MS\";\n"
"background-color: rgb(17, 99, 116);\n"
"border-color: rgb(0, 0, 0);\n"
"gridline-color: rgb(0, 0, 0);")
        self.TITLE.setObjectName("TITLE")
        self.Team_photo = QtWidgets.QLabel(self.frame)
        self.Team_photo.setGeometry(QtCore.QRect(1170, -70, 331, 291))
        self.Team_photo.setMinimumSize(QtCore.QSize(181, 0))
        self.Team_photo.setStyleSheet("image: url(:/newPrefix/Pictures/poop.png);\n"
"background-color: rgb(17, 99, 116);")
        self.Team_photo.setText("")
        self.Team_photo.setObjectName("Team_photo")
        self.Sub_Title = QtWidgets.QLabel(self.frame)
        self.Sub_Title.setGeometry(QtCore.QRect(570, 0, 351, 151))
        self.Sub_Title.setStyleSheet("font: 8pt \"MS Shell Dlg 2\";\n"
"font: 75 8pt \"Trebuchet MS\";\n"
"background-color: rgb(17, 99, 116);\n"
"border-color: rgb(0, 0, 0);\n"
"gridline-color: rgb(0, 0, 0);")
        self.Sub_Title.setObjectName("Sub_Title")
        self.Control_Board = QtWidgets.QFrame(self.centralwidget)
        self.Control_Board.setGeometry(QtCore.QRect(0, 160, 451, 691))
        self.Control_Board.setStyleSheet("background-color: rgb(29, 114, 128);")
        self.Control_Board.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Control_Board.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Control_Board.setObjectName("Control_Board")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.Control_Board)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_11 = QtWidgets.QFrame(self.Control_Board)
        self.frame_11.setStyleSheet("background-color: rgb(17, 99, 116);")
        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_11)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_5 = QtWidgets.QFrame(self.frame_11)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_10 = QtWidgets.QFrame(self.frame_5)
        self.frame_10.setStyleSheet("background-color: rgb(17, 99, 116);")
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame_10)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame_10)
        self.pushButton_5.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout_3.addWidget(self.pushButton_5, 0, 0, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.frame_10)
        self.pushButton_4.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout_3.addWidget(self.pushButton_4, 1, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_10)
        self.pushButton_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout_3.addWidget(self.pushButton_2, 3, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.frame_10)
        self.pushButton.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_3.addWidget(self.pushButton, 4, 0, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_10)
        self.pushButton_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout_3.addWidget(self.pushButton_3, 2, 0, 1, 1)
        self.horizontalLayout.addWidget(self.frame_10)
        self.frame_12 = QtWidgets.QFrame(self.frame_5)
        self.frame_12.setStyleSheet("background-color: rgb(17, 99, 116);")
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.pushButton_8 = QtWidgets.QPushButton(self.frame_12)
        self.pushButton_8.setGeometry(QtCore.QRect(20, 130, 161, 23))
        self.pushButton_8.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame_12)
        self.pushButton_9.setGeometry(QtCore.QRect(10, 190, 161, 23))
        self.pushButton_9.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(self.frame_12)
        self.pushButton_10.setGeometry(QtCore.QRect(10, 250, 161, 23))
        self.pushButton_10.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.pushButton_10.setObjectName("pushButton_10")
        self.label_5 = QtWidgets.QLabel(self.frame_12)
        self.label_5.setGeometry(QtCore.QRect(10, 20, 171, 21))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.frame_12)
        self.label_6.setGeometry(QtCore.QRect(10, 40, 171, 21))
        self.label_6.setObjectName("label_6")
        self.horizontalLayout.addWidget(self.frame_12)
        self.verticalLayout_2.addWidget(self.frame_5)
        self.frame_4 = QtWidgets.QFrame(self.frame_11)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.verticalLayout_2.addWidget(self.frame_4)
        self.verticalLayout.addWidget(self.frame_11)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(450, 160, 981, 691))
        self.frame_3.setStyleSheet("background-color: rgb(29, 114, 128);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout.setObjectName("gridLayout")
        self.frame_8 = QtWidgets.QFrame(self.frame_3)
        self.frame_8.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_8)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.Main_thing = QtWidgets.QWidget(self.frame_8)
        self.Main_thing.setObjectName("Main_thing")
        self.gridLayout_2.addWidget(self.Main_thing, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.frame_8, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.frame.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>poop</p></body></html>"))
        self.TITLE.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>poop</p><p><br/></p></body></html>"))
        self.TITLE.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:48pt; font-weight:400; color:#ffffff;\">SEA TEAM 1</span></p></body></html>"))
        self.Sub_Title.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>poop</p><p><br/></p></body></html>"))
        self.Sub_Title.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:48pt; font-weight:400; color:#ffffff;\">B.O.A.T.</span></p></body></html>"))
        self.pushButton_5.setText(_translate("MainWindow", "Ping Plane"))
        self.pushButton_4.setText(_translate("MainWindow", "Calibrate Altituide"))
        self.pushButton_2.setText(_translate("MainWindow", "Calibrate Gyroscope"))
        self.pushButton.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_3.setText(_translate("MainWindow", "Calibratie airspeed"))
        self.pushButton_8.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_9.setText(_translate("MainWindow", "PushButton"))
        self.pushButton_10.setText(_translate("MainWindow", "PushButton"))
        self.label_5.setText(_translate("MainWindow", "Time: 00:00:00"))
        self.label_6.setText(_translate("MainWindow", "Status: NULL"))
import GUI_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
